datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// https://stackoverflow.com/questions/61260181/prisma-schema-create-a-relation-field-from-multiple-possible-foreign-keys-or
// Modeling a graph looks a little weird in prism right now since you have to model *both sides* of the
// relationships.
// Ideally we could do something like this
// model Person {
//   id                 Int            @id @default(autoincrement())
//   firstName          String
//   lastName           String
//   createdAt          DateTime       @default(now())
//   relationships      Relationship[] @relation(fields: [id], references: [id])
// }
// model Relationship {
//   id      Int    @id @default(autoincrement())
//   leftId  Int
//   left    Person @relation(fields: [leftId], references: [id])
//   rightId Int
//   right   Person @relation( fields: [rightId], references: [id])
//   @@unique([leftId, rightId])
// }
//
// For now, we just have to get *both sides* when fetching from the DB and smoosh them together :(
// This discussion also sounds like a possible, eventual solution:
// https://github.com/prisma/prisma/issues/3939

model Person {
  id                 Int            @id @default(autoincrement())
  firstName          String
  lastName           String
  createdAt          DateTime       @default(now())
  relationshipsLeft  Relationship[] @relation("Person1")
  relationshipsRight Relationship[] @relation("Person2")
}

model Relationship {
  id      Int    @id @default(autoincrement())
  leftId  Int
  left    Person @relation("Person1", fields: [leftId], references: [id])
  rightId Int
  right   Person @relation("Person2", fields: [rightId], references: [id])
}
